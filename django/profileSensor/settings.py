"""
Django settings for profileSensor project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-urq6#%%e9$cv2l)li28!6$m1k2m&^(6_1uhze(pm!=#h35!me2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not bool(os.environ.get("PRODUCTION", ""))

ALLOWED_HOSTS = (os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1')+(','+os.environ.get('CUSTOM_ALLOWED_HOSTS')) if 'CUSTOM_ALLOWED_HOSTS' in os.environ else '').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'postgreSQL',
    'frontend',
    'channels',
	'corsheaders',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'profileSensor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'profileSensor.wsgi.application'
ASGI_APPLICATION = 'profileSensor.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": os.environ.get('REDIS_HOSTS', 'redis://default:redispw@localhost:55001').split(',')
        },
    },
}
# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
	'default':{
		'HOST':os.environ.get('POSTGRES_HOST', 'localhost'),
		'PORT':int(os.environ.get('POSTGRES_PORT', '54321')),
		'ENGINE':os.environ.get('IKOFFICE_DATABASE_ENGINE', 'django.db.backends.postgresql'),
		'NAME':os.environ.get('POSTGRES_DB', 'SmartWelding'),
		'USER':os.environ.get('POSTGRES_USER', 'SmartWelding'),
		'PASSWORD':os.environ.get('POSTGRES_PASSWORD', 'notsosecret'),
	}
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
#STATIC_ROOT = 'static/'
STATIC_ROOT = 'static'


# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'), 
# ]
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_WHITELIST = (os.environ.get('CORS_ORIGIN_WHITELIST', 'http://localhost:3000,http://127.0.0.1:3000')+(','+os.environ.get('CUSTOM_CORS_ORIGIN_WHITELIST') if 'CUSTOM_CORS_ORIGIN_WHITELIST' in os.environ else '')).split(',')

KAFKA_BROKER=os.environ.get("KAFKA_BROKER", "192.168.20.222:9092")